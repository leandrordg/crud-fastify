// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  first_name    String?
  last_name     String?
  email_address String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  comment_likes CommentLike[]
  followers     Follows[]     @relation("following")
  following     Follows[]     @relation("follower")

  @@map("users")
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String?
  updated   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  comments  Comment[]
  likes     Like[]

  @@map("posts")
}

model Comment {
  id            String        @id @default(cuid())
  content       String
  updated       Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  post          Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  comment_likes CommentLike[]

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  @@map("likes")
}

model CommentLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@map("comment_likes")
}
